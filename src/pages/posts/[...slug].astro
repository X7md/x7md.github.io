---
import Layout from '@/layouts/Layout.astro';
import { type CollectionEntry, getCollection } from 'astro:content';
import { blogPost } from '@/schema.blog';

export async function getStaticPaths() {
	const posts = await getCollection('posts', ({ data }) => {
	return data.draft !== true;
	});
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<'posts'>;

const post = Astro.props;
const { Content } = await post.render();

// Prepare data for JSON-LD
const postUrl = `https://blog.x7md.net/posts/${post.slug}/`;
const postContent = await post.render();

// Function to clean and escape text for JSON-LD
function cleanTextForJsonLd(text: string) {
	if (!text) return '';
	
	return text
		.replace(/<[^>]*>/g, '') // Remove HTML tags
		.replace(/&[a-zA-Z0-9#]+;/g, ' ') // Remove HTML entities
		.replace(/\s+/g, ' ') // Normalize whitespace
		.replace(/\\/g, '\\\\') // Escape backslashes
		.replace(/"/g, '\\"') // Escape quotes
		.replace(/\n/g, ' ') // Replace newlines with spaces
		.replace(/\r/g, '') // Remove carriage returns
		.replace(/\t/g, ' ') // Replace tabs with spaces
		.trim();
}

// Use description as articleBody for schema.org (clean and safe approach)
// In the future, we could enhance this by rendering content server-side
const articleBodyText = cleanTextForJsonLd(post.data.description);

// Count words in the description (what we're using for articleBody)
const wordCount = post.data.description ? post.data.description.split(/\s+/).filter(word => word.trim().length > 0).length : 0;

// Calculate reading time (average 200 words per minute)
const readingTimeMinutes = Math.ceil(wordCount / 200);

const jsonLdData = {
	url: postUrl,
	headline: post.data.title,
	description: post.data.description,
	articleBody: articleBodyText,
	datePublished: post.data.pubDate.toISOString(),
	dateModified: post.data.updatedDate ? post.data.updatedDate.toISOString() : post.data.pubDate.toISOString(),
	image: post.data.image ? `https://blog.x7md.net${post.data.image}` : undefined,
	keywords: [...(post.data.tags || []), ...(post.data.keyword || [])],
	wordCount: wordCount,
	timeRequired: `PT${readingTimeMinutes}M` // ISO 8601 duration format
};
---

<Layout title={post.data.title} description={post.data.description}>
    <main>
        <article class="mx-lg-5 m-3">
			<div class="p-2">
				<h1>{post.data.title}</h1>
				<time>{new Date(post.data.pubDate)
				.toLocaleString('ar-SA-u-ca-islamic-umalqura', {
					weekday: 'long',
					year: 'numeric',
					month: 'long',
					day: 'numeric',
				  })}</time>
			</div>
			
			<!-- Author Section -->
			<hr class="author-hr">
			<div class="author-box">
				<img src="/images/1x1/avatar.jpg" alt="حمد بنقالي" class="author-avatar">
				<div class="author-text">
					<h6 class="author-name">حمد بنقالي</h6>
					<small class="author-desc">تقني شغوف بتطوير البرمجيات وتقنيات الويب</small>
				</div>
			</div>
			
			<hr>
            <Content />
        </article>
    </main>
    
    <!-- JSON-LD Structured Data -->
    <script type="application/ld+json" set:html={blogPost(jsonLdData)}></script>
</Layout>
